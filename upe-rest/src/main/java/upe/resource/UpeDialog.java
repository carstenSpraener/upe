/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package upe.resource;

import com.google.gson.*;
import upe.exception.UPERuntimeException;
import upe.process.*;
import upe.process.messages.UProcessMessage;
import upe.process.messages.UProcessMessageImpl;
import upe.process.messages.UProcessMessageStorage;
import upe.resource.model.*;
import upe.resource.persistorimpl.UpeDialogPersistorJdbcImpl;

import java.lang.reflect.Type;
import java.util.ConcurrentModificationException;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import java.util.logging.Logger;
import java.util.stream.Collectors;

public class UpeDialog {
    private static final Logger LOGGER = Logger.getLogger(UpeDialog.class.getName());

    private UpeDialogProcessEngine engine;

    public UpeDialog() {
        engine = new UpeDialogProcessEngine();
    }

    public static Gson getGson() {
        return new GsonBuilder()
                .registerTypeAdapter(UProcessMessage.class, (JsonSerializer) UpeDialog::jsonizeMessage)
                .registerTypeAdapter(UProcessMessage.class, (JsonDeserializer<UProcessMessage>) UpeDialog::deserializeMessage)
                .create();
    }

    private static UProcessMessage deserializeMessage(JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext) {
        UProcessMessageImpl msgIn = jsonDeserializationContext.deserialize(jsonElement, UProcessMessageImpl.class);
        return UProcessMessageStorage.getInstance().getMessage(msgIn.getMessageID());
    }

    private static JsonElement jsonizeMessage(Object o, Type type, JsonSerializationContext jsonSerializationContext) {
        UProcessMessage msgIn = (UProcessMessage) o;
        UProcessMessageImpl msg = new UProcessMessageImpl(msgIn.getMessageID(), null, msgIn.getMessageLevel());
        return jsonSerializationContext.serialize(msg);
    }

    public UpeDialog(UpeDialogProcessEngine engine) {
        this.engine = engine;
    }

    public ProcessDelta getDialogState(String dialogID) {
        return getDialogState(dialogID, Integer.MAX_VALUE);
    }

    public ProcessDelta getDialogState(String dialogID, int stepNr) {
        UpeDialogState state = rebuild(dialogID, stepNr);
        UProcess p = getActiveProcess();
        ProcessDelta pDelta = new ProcessDelta(engine, state, UpeDeltaType.RB);
        pDelta.buildCompleteState(p);
        return pDelta;
    }

    private class ModificationResult {
        UpeDialogState state;
        UProcessDeltaRecorder deltaRecorder;

        public ModificationResult(UpeDialogState state, UProcessDeltaRecorder deltaRecorder) {
            this.state = state;
            this.deltaRecorder = deltaRecorder;
        }
    }

    public ProcessDelta initiateProcess(String name, Map<String, Object> args) {
        LOGGER.info(()->"Initiating process "+name+" with args "+args);
        try (TimeLogger tl = new TimeLogger("initiateProcess")) {
            UpeDialogState state = UpeDialogPersistorJdbcImpl.intance(getGson()).initiate();
            UProcessDeltaRecorder recorder = new UProcessDeltaRecorder(state,this.engine);
            recorder.startRecording(UpeDeltaType.CL);
            engine.callProcess(name, args, null);
            engine.getActiveProcess().inputStops();
            List<ProcessDelta> deltaList = recorder.stopRecording();
            UpeDialogPersistorJdbcImpl.intance(getGson()).storeDelta(
                    state.getDialogID(),
                    state.getStepCount(),
                    deltaList
            );
            return recorder.getActiveDelta();
        } catch (Exception e) {
            throw new UPERuntimeException(e);
        }
    }

    public UpeDialogState rebuild(String dialogID) {
        return this.rebuild(dialogID, Integer.MAX_VALUE);
    }

    public UpeDialogState rebuild(String dialogID, int stepNr) {
        UpeDialogState state = UpeDialogPersistorJdbcImpl.intance(getGson()).restore(dialogID);
        List<UpeStep> stepList = state.getSteps().stream()
                .filter(step -> step.getStepNr() <= stepNr)
                .collect(Collectors.toList());
        if (!stepList.isEmpty()) {
            UProcessDeltaApplier applier = new UProcessDeltaApplier();
            for( UpeStep step : stepList ) {
                applier.applyDelta(this.engine, step.getDeltaList());
            }
        }
        if (stepNr <= state.getStepCount()) {
            state.setStepCount(stepNr);
        }
        return state;
    }

    public ProcessDelta putValueChange(String dialogID, int stepCount, String valuePath, String newValueFromFrontend) {
        LOGGER.info("putValueChange on Dialog "+dialogID+" step "+stepCount+" and element "+valuePath+" with value "+newValueFromFrontend);
        try (TimeLogger tl = new TimeLogger("putValueChange")) {
            String oldValue = "";
            Consumer<UProcess> procConsumer = (p) -> {
                ((UProcessField) p.getProcessElement(valuePath)).setValueFromFrontend(newValueFromFrontend);
            };
            ModificationResult result = doProcessModification(dialogID, stepCount, valuePath, UpeDeltaType.VC, procConsumer);
            UpeDialogPersistorJdbcImpl.intance(getGson())
                    .storeDelta(
                            result.state.getDialogID(),
                            result.state.getStepCount(),
                            result.deltaRecorder.getRecordedDeltas()
                    );
            return result.deltaRecorder.getActiveDelta();
        } catch (Exception e) {
            throw new UPERuntimeException(e);
        }
    }

    private ModificationResult doProcessModification(String dialogID, int stepCount, String valuePath,
                                                     UpeDeltaType deltaType,
                                                     Consumer<UProcess> procConsumer
    ) {
        LOGGER.info(()->">>>Starting process modification on dialog "+dialogID+" and step "+stepCount+"\n");
        UpeDialogState state = rebuild(dialogID);
        if (state.getStepCount() != stepCount) {
            throw new ConcurrentModificationException("Dialog " + dialogID + " was externaly updated");
        }
        UProcess p = getActiveProcess();

        LOGGER.info(()->"Rebuilding of process "+p.getName()+" done. Creating a new Recorder.");
        String oldValue = null;
        UProcessElement elementToModify = p.getProcessElement(valuePath);
        if (elementToModify instanceof UProcessField field) {
            oldValue = field.getValueForFrontend();
        }

        LOGGER.info(()->"Starting Recording of process modifications.");
        UProcessDeltaRecorder deltaRecorder = new UProcessDeltaRecorder(state, this.engine);
        deltaRecorder.startRecording(deltaType);
        p.inputStarts();
        procConsumer.accept(p);
        engine.getActiveProcess().inputStops();
        LOGGER.info(()->"Modification done. Stopping Recording of process modifications.");
        deltaRecorder.stopRecording();
        state.setStepCount(state.getStepCount() + 1);
        String newValue = null;
        if (elementToModify instanceof UProcessField field) {
            newValue = field.getValueForFrontend();
        }
        state.getSteps().clear();
        LOGGER.info(()->">>ProcessModification is finished.\n");
        return new ModificationResult(state, deltaRecorder);
    }

    public ProcessDelta triggerAction(String dialogID, int stepCount, String actionPath) {
        LOGGER.info("triggerAction on Dialog "+dialogID+" step "+stepCount+" and action "+actionPath);

        try (TimeLogger tl = new TimeLogger("putValueChange")) {
            ModificationResult result = doProcessModification(dialogID, stepCount, actionPath, UpeDeltaType.AC, (p) -> {
                if (p.getProcessElement(actionPath) instanceof UProcessAction act) {
                    act.execute(null);
                } else {
                    throw new UPERuntimeException("Illegal action path '" + actionPath + "' in trigger action");
                }
            });
            UpeDialogPersistorJdbcImpl.intance(getGson()).storeDelta(
                    result.state.getDialogID(),
                    result.state.getStepCount(),
                    result.deltaRecorder.getRecordedDeltas()
            );
            return result.deltaRecorder.getActiveDelta();
        } catch (Exception e) {
            throw new UPERuntimeException(e);
        }
    }

    public UProcess getActiveProcess() {
        return this.engine.getActiveProcess();
    }
}
