/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package upe.resource;

import com.google.gson.Gson;
import upe.exception.UPERuntimeException;
import upe.process.UProcess;
import upe.process.UProcessAction;
import upe.process.UProcessEngine;
import upe.process.UProcessField;
import upe.process.engine.BaseUProcessEngine;
import upe.resource.model.ProcessDelta;
import upe.resource.model.UpeDialogState;
import upe.resource.model.UpeStep;
import upe.resource.persistorimpl.UpeDialogPersistorJdbcImpl;

import java.io.Serializable;
import java.util.ConcurrentModificationException;
import java.util.Map;
import java.util.function.Consumer;

public class UpeDialog {
    private BaseUProcessEngine engine = new BaseUProcessEngine();

    private class ModificationResult {
        UpeDialogState state;
        ProcessDelta delta;
        String oldValue;

        public ModificationResult(UpeDialogState state, ProcessDelta delta, String oldValue) {
            this.state = state;
            this.delta = delta;
            this.oldValue = oldValue;
        }
    }

    public ProcessDelta initiateProcess(String name, Map<String, Serializable> args) {
        UpeDialogState state = UpeDialogPersistorJdbcImpl.intance().initiate();
        String jsonArgs = new Gson().toJson(args);
        state = UpeDialogPersistorJdbcImpl.intance().storeStep(
                state.getDialogID(),
                state.getStepCount(),
                "@INIT;"+name,
                null,
                jsonArgs);
        engine.callProcess(name, args, null);
        ProcessDelta delta = new ProcessDelta(state);
        delta.buildCompleteState(getActiveProcess());
        return delta;
    }

    public ProcessDelta rebuild(String dialogID) {
        return this.rebuild(dialogID, Integer.MAX_VALUE);
    }

    public ProcessDelta rebuild(String dialogID, int stepNr) {
        UpeDialogState state = UpeDialogPersistorJdbcImpl.intance().restore(dialogID);
        UpeStep initialStep = state.getSteps().get(0);
        UProcess p = buildFromInitialStep(engine, initialStep);
        state.getSteps().stream()
                .skip(1)
                .filter(step -> step.getStepNr() <= stepNr)
                .forEach(step -> {
                    handleStep(engine, step);
                });
        if( stepNr <= state.getStepCount() ) {
            state.setStepCount(stepNr);
        }
        ProcessDelta delta = new ProcessDelta(state);
        delta.buildCompleteState(p);
        return delta;
    }

    public ProcessDelta putValueChange(String dialogID, int stepCount, String valuePath, String newValueFromFrontend) {
        String oldValue = "";
        Consumer<UProcess> procConsumer = (p) -> {
            ((UProcessField)p.getProcessElement(valuePath)).setValueFromFrontend(newValueFromFrontend);
        };
        ModificationResult result = doProcessModification(dialogID, stepCount, valuePath, procConsumer);
        UpeDialogPersistorJdbcImpl.intance().storeStep(
                result.state.getDialogID(),
                result.state.getStepCount(),
                valuePath,
                result.oldValue,
                newValueFromFrontend
        );
        return result.delta;
    }

    private ModificationResult doProcessModification(String dialogID, int stepCount, String valuePath,
                                                     Consumer<UProcess> procConsumer
    ) {
        UpeDialogState state = rebuild(dialogID).getState();
        if( state.getStepCount() != stepCount) {
            throw new ConcurrentModificationException("Dialog "+ dialogID +" was externaly updated");
        }
        ProcessDelta delta = new ProcessDelta(state);
        UProcess p = getActiveProcess();
        String oldValue = null;
        if( p.getProcessElement(valuePath) instanceof UProcessField field) {
            oldValue = field.getValueForFrontend();
        }
        delta.startRecording(p);
        p.inputStarts();
        procConsumer.accept(p);
        p.inputStops();
        delta.stopRecording(p);
        state.setStepCount(state.getStepCount()+1);
        return new ModificationResult(state, delta, oldValue);
    }

    public ProcessDelta triggerAction(String dialogID, int stepCount, String actionPath) {
        ModificationResult result = doProcessModification(dialogID, stepCount, actionPath, (p) -> {
            if( p.getProcessElement(actionPath) instanceof UProcessAction act) {
                act.execute(null);
            } else {
                throw new UPERuntimeException("Illegal action path '"+actionPath+"' in trigger action");
            }
        });
        UpeDialogPersistorJdbcImpl.intance().storeAction(
                result.state.getDialogID(),
                result.state.getStepCount(),
                actionPath
        );
        return result.delta;
    }


    private void handleStep(UProcessEngine pe, UpeStep step) {
        String type = step.getType();
        UProcess p = ((BaseUProcessEngine)pe).getActiveProcessInfo().getProcess();
        p.inputStarts();
        switch( type ) {
            case "VC":
                ((UProcessField)p.getProcessElement(step.getFieldPath())).setValueFromFrontend(step.getNewValue());
                break;
            case "AC":
                ((UProcessAction)p.getProcessElement(step.getFieldPath())).execute(null);
                break;
            default:
                break;
        }
        p.inputStops();
    }

    private UProcess buildFromInitialStep(UProcessEngine pe, UpeStep initialStep) {
        String cmd = initialStep.getFieldPath();
        UProcess p = null;
        if( cmd.startsWith("@") ) {
            String instruction = cmd.substring(1, cmd.indexOf(';'));
            String param = cmd.substring(cmd.indexOf(';')+1);
            switch (instruction) {
                case "INIT":
                    pe.callProcess(param, null, null);
                    break;
                default:
                    break;
            }
        }
        return ((BaseUProcessEngine)pe).getActiveProcessInfo().getProcess();
    }

    public UProcess getActiveProcess() {
        return this.engine.getActiveProcessInfo().getProcess();
    }
}
